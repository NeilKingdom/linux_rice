#!/bin/sh
#
# Purpose: Helper script for connecting printers
# Dependencies: lpadmin, dmenu
#
# TODO: sel_existing() does not validate
# case where user exits dmenu via ESC

CACHE_PATH="$XDG_CACHE_HOME/printctl"

add_new() {
    # Parse IP address
    while
        printf "Enter IP address (xxx.xxx.xxx.xxx): "; read -r IP
        [ "$(echo "$IP" | grep -P "(\d{1,3})((\.\d{1,3}){3})")" = "" ]
    do :; done

   # Parse printer name
   while
       printf "Enter printer's name: "; read -r PNAME
       [ "$PNAME" = "" ]
   do :; done

   # Append printer to cache (if it doesn't already exist)
   ! [ -f "$CACHE_PATH" ] || \
       [ "$(grep -x "$PNAME $IP" "$CACHE_PATH")" = "" ] && \
           echo "$PNAME $IP" >> "$CACHE_PATH"
   }

   sel_existing() {
       # Open dmenu prompt with list of cached printers
       PNAME=$(dmenu -p "Printers" -l 15 -g 1 -nb "#222222" -nf "#bbbbbb" \
           -sb "#005577" -sf "#eeeeee" < "$CACHE_PATH")

   # Parse selection
   IP=$(echo "$PNAME" | awk '{print $2}')
   PNAME=$(echo "$PNAME" | awk '{print $1}')
}

del_cache() {
    printf "Are you sure you'd like to delete the printer cache? [y/n] "; read -r OPT
    [ "$OPT" = "y" ] || [ "$OPT" = "Y" ] && rm "$CACHE_PATH" && exit 0
    menu
}

menu() {
    if [ -f "$CACHE_PATH" ]; then
        while
            printf "%s\n%s\n%s\n%s\n" \
                "1) Create new printer" \
                "2) Use existing printer" \
                "3) Clear printer cache" \
                "4) Exit"; read -r OPT
                            [ "$OPT" != "1" ] && \
                                [ "$OPT" != "2" ] && \
                                [ "$OPT" != "3" ] && \
                                [ "$OPT" != "4" ]
                            do :; done

        # Switch on user selection
        case "$OPT" in
            "1")
                add_new
                ;;
            "2")
                sel_existing
                ;;
            "3")
                del_cache
                ;;
            "4")
                exit 0
        esac
    else
        add_new
    fi
}

# Script start
menu

# Execute command
CMD="lpadmin -p $PNAME -E -v ipp://$IP/ipp/print -m everywhere"
echo "$CMD"
eval "$CMD"
